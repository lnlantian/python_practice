#图的遍历

图的遍历就是要找出图中所有的点，一般有以下两种方法：

深度优先遍历：(Depth First Search, DFS)
深度优先遍历图的方法是，从图中某顶点 v 出发， 不断访问邻居， 邻居的邻居直到访问完毕。

广度优先搜索：(Breadth First Search, BFS)
广度优先搜索，可以被形象地描述为 "浅尝辄止"，它也需要一个队列以保持遍历过的顶点顺序，\
以便按出队的顺序再去访问这些顶点的邻接顶点。

#二叉树
非线性结构：为了高效地兼顾静态操作和动态操作
树是一种特殊的图，是一种无环连通图，是一种极大无环图，也是一种极小连通图。

树是一种递归的数据结构
树的基本算法有前中后序遍历和层次遍历，有的同学对前中后这三个分别具体表现的访问顺序比较模糊，其实当初我也是一样的，后面我学到了一点，\
你只需要记住：所谓的前中后指的是根节点的位置，其他位置按照先左后右排列即可。比如前序遍历就是根左右, 中序就是左根右，后序就是左右根.

树的重要性质：

如果树有 n 个顶点，那么其就有 n - 1 条边，这说明了树的顶点数和边数是同阶的。
任何一个节点到根节点存在唯一路径, 路径的长度为节点所处的深度

#二叉树
二叉树是节点度数不超过二的树，是树的一种特殊子集，有趣的是二叉树这种被限制的树结构却能够表示和实现所有的树， 它背后的原理正是长子 + 兄弟法，\
用邓老师的话说就是二叉树是多叉树的特例，但在有根且有序时，其描述能力却足以覆盖后者。

一个典型的二叉树：标记为 7 的节点具有两个子节点, 标记为 2 和 6; 一个父节点,标记为 2,作为根节点, 在顶部,没有父节点。
真二叉树 （所有节点的度数只能是偶数，即只能为 0 或者 2）

#二叉查找树
二叉排序树（Binary Sort Tree），又称二叉查找树（Binary Search Tree），亦称二叉搜索树。

二叉查找树具有下列性质的二叉树：
若左子树不空，则左子树上所有节点的值均小于它的根节点的值；
若右子树不空，则右子树上所有节点的值均大于它的根节点的值；
左、右子树也分别为二叉排序树；
没有键值相等的节点。
对于一个二叉查找树，常规操作有插入，查找，删除，找父节点，求最大值，求最小值。

平衡二叉树（AVL）




